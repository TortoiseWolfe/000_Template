name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD: 80

jobs:
  # ====================
  # Quality Checks
  # ====================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g pa11y lighthouse

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Format check
        run: npm run format:check

      - name: Dependency audit
        run: |
          npm audit --audit-level=moderate
          npm outdated || true

  # ====================
  # Security Scanning
  # ====================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run TruffleHog (Secret Scanning)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: SAST Scan with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          auditOn: push
          
      - name: License Compliance Check
        run: |
          npm install -g license-checker
          license-checker --summary --failOn "GPL"

      - name: Container Scan (if Docker)
        if: hashFiles('Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

  # ====================
  # Testing
  # ====================
  test:
    name: Tests (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          npm run db:migrate:test || true

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:unit -- --coverage
          echo "Coverage report:"
          npm run coverage:report

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run build
          npx playwright install --with-deps
          npm run test:e2e

      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true

      - name: Check coverage threshold
        if: matrix.test-type == 'unit'
        run: |
          COVERAGE=$(npm run coverage:summary --silent | grep "All files" | awk '{print $10}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi

  # ====================
  # Accessibility Testing
  # ====================
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g pa11y @axe-core/cli

      - name: Build application
        run: npm run build

      - name: Start server
        run: |
          npm run preview &
          sleep 5

      - name: Run Pa11y tests
        run: |
          pa11y http://localhost:3000 --standard WCAG2AA
          pa11y http://localhost:3000 --reporter cli --reporter json > pa11y-results.json

      - name: Run Axe tests
        run: |
          axe http://localhost:3000 --tags wcag2a,wcag2aa,wcag21a,wcag21aa

      - name: Test color contrast
        run: npm run test:contrast

      - name: Test colorblind accessibility
        run: |
          npm run test:colorblind
          # Test for deuteranopia (most common)
          pa11y http://localhost:3000 --add-rule "color-contrast"
          
      - name: Test keyboard navigation
        run: npm run test:keyboard

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results
          path: |
            pa11y-results.json
            axe-results.json

  # ====================
  # Performance Testing
  # ====================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build

      - name: Analyze bundle size
        run: |
          npm run bundle-analyze -- --json > bundle-stats.json
          MAX_SIZE=512000  # 500KB
          ACTUAL_SIZE=$(cat bundle-stats.json | jq '.assets[0].size')
          
          if [ "$ACTUAL_SIZE" -gt "$MAX_SIZE" ]; then
            echo "Bundle size ${ACTUAL_SIZE} exceeds maximum ${MAX_SIZE}"
            exit 1
          fi

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=.lighthouserc.js

      - name: Check performance metrics
        run: |
          # Extract scores from Lighthouse results
          FCP=$(cat .lighthouseci/*.json | jq '.audits."first-contentful-paint".score')
          TTI=$(cat .lighthouseci/*.json | jq '.audits."interactive".score')
          
          # Ensure scores meet thresholds (0.9 = 90/100)
          if (( $(echo "$FCP < 0.9" | bc -l) )); then
            echo "FCP score ${FCP} is below threshold"
            exit 1
          fi
          
          if (( $(echo "$TTI < 0.9" | bc -l) )); then
            echo "TTI score ${TTI} is below threshold"
            exit 1
          fi

  # ====================
  # Visual Regression
  # ====================
  visual:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run visual tests
        run: npm run test:visual

      - name: Upload visual diff results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: visual-regression-diff
          path: test-results/visual/

  # ====================
  # Cross-browser Testing
  # ====================
  browser-compat:
    name: Browser Compatibility (${{ matrix.browser }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox, safari, edge]
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run browser tests
        run: npm run test:browser -- --browser=${{ matrix.browser }}

  # ====================
  # Documentation
  # ====================
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check markdown files
        uses: DavidAnson/markdownlint-cli2-action@v14
        with:
          globs: '**/*.md'

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.markdown-link-check.json'

      - name: Validate OpenAPI specs
        if: hashFiles('specs/api/*.yaml') != ''
        run: |
          npm install -g @apidevtools/swagger-cli
          swagger-cli validate specs/api/*.yaml

  # ====================
  # Final Status Check
  # ====================
  status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [quality, security, test, accessibility, performance, visual, browser-compat, docs]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more CI checks failed"
            exit 1
          fi
          
          echo "All CI checks passed successfully!"

      - name: Post status comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const statusEmoji = '${{ contains(needs.*.result, 'failure') }}' === 'true' ? '❌' : '✅';
            const body = `## CI Pipeline Status ${statusEmoji}
            
            | Check | Status |
            |-------|--------|
            | Code Quality | ${{ needs.quality.result }} |
            | Security | ${{ needs.security.result }} |
            | Tests | ${{ needs.test.result }} |
            | Accessibility | ${{ needs.accessibility.result }} |
            | Performance | ${{ needs.performance.result }} |
            | Visual Tests | ${{ needs.visual.result }} |
            | Browser Compatibility | ${{ needs.browser-compat.result }} |
            | Documentation | ${{ needs.docs.result }} |
            
            **Commit**: ${{ github.sha }}
            **Triggered by**: @${{ github.actor }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });